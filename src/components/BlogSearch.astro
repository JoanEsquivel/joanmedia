<div class="w-full mb-5">
  <div class="relative">
    <input
      type="text"
      id="blog-search"
      placeholder="Search posts..."
      class="input input-bordered w-full pr-10"
    />
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 absolute right-3 top-3 text-gray-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
      />
    </svg>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('blog-search') as HTMLInputElement;
    
    // Create a debounce function to avoid excessive filtering
    function debounce(fn: Function, delay: number) {
      let timer: ReturnType<typeof setTimeout>;
      return function(...args: any[]) {
        clearTimeout(timer);
        timer = setTimeout(() => fn(...args), delay);
      }
    }
    
    // Handle search input with debounce
    const handleSearch = debounce(() => {
      const searchTerm = searchInput.value.toLowerCase().trim();
      console.log(`Search term: "${searchTerm}"`);
      
      // Only dispatch the event, let BlogFilters handle all visibility changes
      document.dispatchEvent(new CustomEvent('blog:search', {
        detail: { searchTerm }
      }));
    }, 200);
    
    // Listen to events from filters to keep the search input in sync
    document.addEventListener('blog:filter', (e: CustomEvent) => {
      // We don't need to handle this specifically anymore
      // as the filter component now handles all visibility logic
    });
    
    // Add event listener for input
    searchInput.addEventListener('input', handleSearch);
  });
</script> 