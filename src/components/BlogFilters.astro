---
interface Props {
  tags: string[];
}

const { tags } = Astro.props;
---

<div class="flex flex-col sm:flex-row gap-4 mb-6">
  <div class="flex-1">
    <label for="sort-select" class="block text-sm font-medium mb-1">Sort by</label>
    <select 
      id="sort-select" 
      class="select select-bordered w-full"
    >
      <option value="newest">Newest first</option>
      <option value="oldest">Oldest first</option>
    </select>
  </div>
  
  <div class="flex-1">
    <label for="tag-filter" class="block text-sm font-medium mb-1">Filter by topic</label>
    <select 
      id="tag-filter" 
      class="select select-bordered w-full"
    >
      <option value="">All topics</option>
      {tags.map((tag) => (
        <option value={tag}>{tag}</option>
      ))}
    </select>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    const tagFilter = document.getElementById('tag-filter') as HTMLSelectElement;
    const postsContainer = document.querySelector('.blog-posts-container');
    
    if (!postsContainer) return;
    
    // Global state for search and filters
    const state = {
      searchTerm: '',
      sortBy: 'newest',
      filterTag: ''
    };
    
    // Store original posts for reference
    const allPosts = Array.from(document.querySelectorAll('.blog-post-card'));
    
    // Function to handle sorting and filtering
    function updatePosts() {
      console.log(`Starting update. Filter tag: "${state.filterTag}", Search term: "${state.searchTerm}"`);
      console.log(`Initial post count: ${allPosts.length}`);
      
      // First determine which posts should be visible based on filters
      const visiblePosts = allPosts.filter(post => {
        // Check search term
        const title = post.getAttribute('data-title')?.toLowerCase() || '';
        const description = post.getAttribute('data-description')?.toLowerCase() || '';
        const matchesSearch = state.searchTerm === '' || 
                              title.includes(state.searchTerm) || 
                              description.includes(state.searchTerm);
        
        // Check tag filter
        let matchesTag = true;
        if (state.filterTag && state.filterTag !== '') {
          const postTags = post.getAttribute('data-tags')?.split(',') || [];
          matchesTag = postTags.includes(state.filterTag);
        }
        
        return matchesSearch && matchesTag;
      });
      
      console.log(`Posts matching filters: ${visiblePosts.length}`);
      
      // Apply sorting to visible posts
      visiblePosts.sort((a, b) => {
        const dateA = new Date(a.getAttribute('data-date') || '').getTime();
        const dateB = new Date(b.getAttribute('data-date') || '').getTime();
        return state.sortBy === 'newest' ? dateB - dateA : dateA - dateB;
      });
      
      // First hide all posts (without removing from DOM)
      allPosts.forEach(post => {
        const postElement = post as HTMLElement;
        const container = postElement.closest('li') || postElement;
        (container as HTMLElement).style.display = 'none';
      });
      
      // Get the posts container and prepare for sorting
      const postsParent = document.querySelector('.blog-posts-container');
      
      if (postsParent && visiblePosts.length > 0) {
        // First get all list items in the current order
        const currentListItems = Array.from(postsParent.children);
        
        // Create a map of posts to their container li elements
        const postMap = new Map();
        
        // Build the mapping
        allPosts.forEach(post => {
          const container = post.closest('li');
          if (container) {
            postMap.set(post, container);
          }
        });
        
        // Get containers for the visible posts in sorted order
        const sortedContainers = visiblePosts
          .map(post => postMap.get(post))
          .filter(container => container !== undefined);
        
        // Display all visible containers
        sortedContainers.forEach(container => {
          if (container) {
            (container as HTMLElement).style.display = '';
          }
        });
        
        // Now sort them in the DOM by appending in the right order
        // This avoids the issues with Safari's DOM manipulation
        sortedContainers.forEach(container => {
          if (container) {
            // No need to remove first, appendChild moves the element
            postsParent.appendChild(container);
          }
        });
      }
      
      // Show a message if no posts are found
      const noResultsMessage = document.getElementById('no-results-message');
      if (visiblePosts.length === 0 && !noResultsMessage) {
        const message = document.createElement('div');
        message.id = 'no-results-message';
        message.className = 'bg-base-200 border-l-4 border-secondary w-full p-4 min-w-full mt-4';
        message.innerHTML = `
          <p class="font-bold">No posts found</p>
          <p>Try adjusting your search or filters to find what you're looking for.</p>
        `;
        (postsContainer as HTMLElement).appendChild(message);
      } else if (visiblePosts.length > 0 && noResultsMessage) {
        noResultsMessage.remove();
      }
      
      // Log information for debugging
      console.log(`Final display: ${visiblePosts.length} visible posts of ${allPosts.length} total`);
      console.log(`Current sort order: ${state.sortBy}`);
    }
    
    // Listen for search events from BlogSearch
    document.addEventListener('blog:search', (e: CustomEvent) => {
      state.searchTerm = e.detail.searchTerm;
      updatePosts();
    });
    
    // Add event listeners for filters
    sortSelect.addEventListener('change', () => {
      state.sortBy = sortSelect.value;
      console.log(`Sort changed to: ${state.sortBy}`);
      updatePosts();
      // Notify other components that filters changed
      document.dispatchEvent(new CustomEvent('blog:filter', {
        detail: { type: 'sort', value: state.sortBy }
      }));
    });
    
    tagFilter.addEventListener('change', () => {
      state.filterTag = tagFilter.value;
      console.log(`Tag filter changed to: "${state.filterTag}"`);
      updatePosts();
      // Notify other components that filters changed
      document.dispatchEvent(new CustomEvent('blog:filter', {
        detail: { type: 'tag', value: state.filterTag }
      }));
    });
    
    // Initialize on page load
    updatePosts();
  });
</script> 