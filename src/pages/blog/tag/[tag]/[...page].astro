---
import BaseLayout from "@layouts/BaseLayout.astro";
import HorizontalCard from "@components/HorizontalCard.astro";
import BlogSearch from "@components/BlogSearch.astro";
import BlogFilters from "@components/BlogFilters.astro";
import BlogFilterSidebar from "@components/BlogFilterSidebar.astro";
import { getCollection } from "astro:content";
import createSlug from "../../../../lib/createSlug";
import type { GetStaticPathsOptions, Page } from "astro";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const all_posts = await getCollection("blog");
  const all_tags = all_posts.flatMap((post) => {
    return post.data.tags || [];
  });

  return all_tags.flatMap((tag) => {
    const filtred_posts = all_posts.filter((post) => {
      return post.data.tags?.includes(tag);
    });
    return paginate(filtred_posts, {
      params: { tag },
      pageSize: 10,
    });
  });
}

const { page } = Astro.props as {
  page: Page<CollectionEntry<"blog">>;
};
const params = Astro.params;

// Extract all unique tags for filters
const allTags = [
  ...new Set(page.data.map((post) => post.data.tags || []).flat()),
] as string[];

// Add the current tag if it's not in the extracted tags (for better UX)
if (params.tag && !allTags.includes(params.tag)) {
  allTags.push(params.tag);
}

// Debug info
console.log(`Tag page for: ${params.tag}`);
console.log(`Posts count: ${page.data.length}`);
console.log(`Available tags: ${allTags.join(", ")}`);
---

<BaseLayout title={"Blog - " + params.tag} sideBarActiveItemID="blog">
  <div class="mb-5">
    <div class="text-3xl w-full font-bold">Latest Posts</div>
  </div>

  <div class="flex">
    <BlogFilterSidebar
      tags={allTags}
      years={[
        ...new Set(
          page.data.map((p) => p.data.pubDate.getFullYear().toString()),
        ),
      ].sort((a, b) => Number(b) - Number(a))}
      activeTag={params.tag}
    />

    <div class="flex-1">
      <div class="mb-6">
        <BlogSearch />
        <BlogFilters tags={allTags} />
      </div>

      {
        page.data.length === 0 ? (
          <div class="bg-base-200 border-l-4 border-secondary w-full p-4 min-w-full">
            <p class="font-bold">Sorry!</p>
            <p>
              There are no blog posts to show at the moment. Check back later!
            </p>
          </div>
        ) : (
          <ul class="blog-posts-container space-y-6">
            {page.data.map((post, index) => (
              <li>
                <HorizontalCard
                  title={post.data.title}
                  img={post.data.heroImage}
                  desc={post.data.description}
                  url={"/blog/" + createSlug(post.data.title, post.slug)}
                  target="_self"
                  badge={post.data.badge}
                  tags={post.data.tags}
                  pubDate={post.data.pubDate.toISOString()}
                />
                {index < page.data.length - 1 && <div class="divider my-2" />}
              </li>
            ))}
          </ul>
        )
      }

      <!-- Numbered pagination -->
      <div class="flex items-center justify-center gap-2 mt-8">
        {
          page.url.prev ? (
            <a href={page.url.prev} class="btn btn-sm">
              ‹
            </a>
          ) : (
            <button class="btn btn-sm" disabled>
              ‹
            </button>
          )
        }
        {
          Array.from({ length: page.lastPage }, (_, i) => i + 1).map((n) => (
            <a
              href={
                n === 1
                  ? `/blog/tag/${params.tag}`
                  : `/blog/tag/${params.tag}/page/${n}`
              }
              class={`btn btn-sm ${n === page.currentPage ? "btn-primary" : ""}`}
            >
              {n}
            </a>
          ))
        }
        {
          page.url.next ? (
            <a href={page.url.next} class="btn btn-sm">
              ›
            </a>
          ) : (
            <button class="btn btn-sm" disabled>
              ›
            </button>
          )
        }
      </div>
    </div>
  </div>
</BaseLayout>
